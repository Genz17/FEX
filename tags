!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BasicTreeGen	BinaryTree.py	/^def BasicTreeGen():$/;"	f
BinaryOperation	Operations.py	/^class BinaryOperation(nn.Module):$/;"	c
BinaryTreeNode	BinaryTree.py	/^class BinaryTreeNode(object):$/;"	c
Buffer	OperationBuffer.py	/^class Buffer(object):$/;"	c
ComputeThroughTree	BinaryTree.py	/^def ComputeThroughTree(treeNode, linearTransform, inputData):$/;"	f
Controller	Controller.py	/^class Controller(nn.Module):$/;"	c
DataGen	DataGen.py	/^def DataGen(batchSize, dim, domainLeft, domainRight, boundary=False):$/;"	f
GetReward	GetReward.py	/^def GetReward(batchSize, batchOperations, domainLeft, domainRight, dim, trainableTree):$/;"	f
LHS_pde	Equation.py	/^def LHS_pde(u, x, dim_set):$/;"	f
LeaveNumCompute	BinaryTree.py	/^def LeaveNumCompute(tree):$/;"	f
NodeNumCompute	BinaryTree.py	/^def NodeNumCompute(tree, num=0):$/;"	f
OperationPlace	BinaryTree.py	/^def OperationPlace(tree, operationInxList, operationDict):$/;"	f
OperatorsGen	BinaryTree.py	/^    def OperatorsGen(self, tree):$/;"	m	class:TrainableTree
RHS_pde	Equation.py	/^def RHS_pde(x):$/;"	f
ShowTree	BinaryTree.py	/^def ShowTree(tree, cnt, ans=None):$/;"	f
TotalopNumCompute	BinaryTree.py	/^def TotalopNumCompute(tree):$/;"	f
TrainableTree	BinaryTree.py	/^class TrainableTree(nn.Module):$/;"	c
UnaryOperation	Operations.py	/^class UnaryOperation(nn.Module):$/;"	c
__init__	BinaryTree.py	/^    def __init__(self, dim):$/;"	m	class:TrainableTree
__init__	BinaryTree.py	/^    def __init__(self, is_unary, count=0, isLeave=True):$/;"	m	class:BinaryTreeNode
__init__	Controller.py	/^    def __init__(self, tree):$/;"	m	class:Controller
__init__	OperationBuffer.py	/^    def __init__(self, maxSize):$/;"	m	class:Buffer
__init__	Operations.py	/^    def __init__(self, operator):$/;"	m	class:BinaryOperation
__init__	Operations.py	/^    def __init__(self, operator, isLeave):$/;"	m	class:UnaryOperation
binary_functions	Operations.py	/^binary_functions = [lambda x,y: x+y,$/;"	v
binary_functions_str	Operations.py	/^binary_functions_str = ['lambda x,y: x+y',$/;"	v
closure	GetReward.py	/^        def closure():$/;"	f	function:GetReward
forward	BinaryTree.py	/^    def forward(self, inputData, operationList):$/;"	m	class:TrainableTree
forward	Operations.py	/^    def forward(self, inputData):$/;"	m	class:UnaryOperation
forward	Operations.py	/^    def forward(self, x, y):$/;"	m	class:BinaryOperation
insertLeft	BinaryTree.py	/^    def insertLeft(self, is_unary):$/;"	m	class:BinaryTreeNode
insertRight	BinaryTree.py	/^    def insertRight(self, is_unary):$/;"	m	class:BinaryTreeNode
model	Trainer.py	/^    model = Controller(tree)$/;"	v
probCalc	Controller.py	/^    def probCalc(self):$/;"	m	class:Controller
refresh	OperationBuffer.py	/^    def refresh(self, candidates):$/;"	m	class:Buffer
sample	Controller.py	/^    def sample(self):$/;"	m	class:Controller
train	Trainer.py	/^def train(model, dim, max_iter):$/;"	f
tree	Trainer.py	/^    tree = BinaryTree.TrainableTree(1)$/;"	v
true_solution	Equation.py	/^def true_solution(x):$/;"	f
unary_functions	Operations.py	/^unary_functions = [lambda x: 0*x**2,$/;"	v
unary_functions_str	Operations.py	/^unary_functions_str = ['lambda x: 0*x**2',$/;"	v
